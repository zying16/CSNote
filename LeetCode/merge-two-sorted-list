将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

- Solution 1:

class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        gen_list = []
        if l1:
            gen_list.append(l1.val)
            while l1.next:
                l1 = l1.next
                gen_list.append(l1.val)
                
        if l2:
            gen_list.append(l2.val)
            while l2.next:
                l2 = l2.next
                gen_list.append(l2.val)
                
        gen_list.sort()
        if gen_list:
            result = ListNode(gen_list[0])
            now = result
            for i,v in enumerate(gen_list):
                if i > 0:
                    next = ListNode(gen_list[i])
                    now.next = next
                    now = next
                    
            return result
        else:
            return None


- Solution 2:

class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        elif not l2:
            return l1
        else:
            result = ListNode(0)
            now = result
            while l1 and l2:
                if l1.val < l2.val:
                    now.next = l1
                    l1 = l1.next
                else:
                    now.next = l2
                    l2 = l2.next
                now = now.next
            if l1:
                now.next = l1
            if l2:
                now.next = l2
            return result.next
